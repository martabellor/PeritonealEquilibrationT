library(roxygen2)
roxygenise()
roxygenise()
setwd("/Users/martabellorego/Desktop/PeritonealEquilibrationT")
library(roxygen2)
roxygenise()
devtools::install("/Users/martabellorego/Desktop/PeritonealEquilibrationT")
library(PeritonealEquilibrationT)
# Ejecutar la aplicación Shiny
runPeritonealEquilibriumTestApp()
# inst/shinyapp/app.R
library(shiny)
library(shinydashboard)
library(DT)
library(ggplot2)
library(PeritonealEquilibrationT)
pointsGlu <- data.frame(
time = c(0, 1, 2, 4),
high = c(1, 0.88, 0.78, 0.61),
medium_high = c(1, 0.79, 0.66, 0.49),
medium_low = c(1, 0.71, 0.55, 0.38),
low = c(1, 0.60, 0.44, 0.26),
very_low = c(1, 0.40, 0.24, 0.12)
)
pointsCrea <- data.frame(
time = c(0, 1, 2, 4),
very_high = c(0, 0.14, 0.23, 0.34),
high = c(0.02, 0.21, 0.34, 0.5),
medium_high = c(0.05, 0.28, 0.40, 0.55),
medium = c(0.08, 0.34, 0.48, 0.65),
medium_low = c(0.1, 0.40, 0.55, 0.72),
low = c(0.12, 0.46, 0.62, 0.81),
very_low = c(0.25, 0.72, 0.87, 1.03)
)
pointsUrea <- data.frame(
time = c(0, 1, 2, 4),
very_high = c(0, 0.32, 0.46, 0.75),
high = c(0.05, 0.45, 0.64, 0.84),
medium = c(0.1, 0.55, 0.73, 0.91),
low = c(0.15, 0.65, 0.83, 0.98),
very_low = c(0.25, 0.85, 0.96, 1.09)
)
ui <- dashboardPage(
dashboardHeader(title = "Peritoneal Equilibration Test"),
dashboardSidebar(
sidebarMenu(
menuItem("Data Input", tabName = "data_input", icon = icon("edit")),
menuItem("Graphs", tabName = "graphs", icon = icon("chart-line"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "data_input",
fluidRow(
box(title = "Patient Data", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 4,
numericInput("age", "Age", value = 30),
selectInput("sex", "Sex", choices = c("Male", "Female")),
numericInput("weight", "Weight (kg)", value = 70),
numericInput("height", "Height (cm)", value = 175),
textOutput("bmiResults")
),
box(title = "Ultrafiltration Volume", status = "info", solidHeader = TRUE, collapsible = TRUE, width = 4,
numericInput("drainVolume", "Drained Volume (mL)", value = 0),
numericInput("infusionVolume", "Infused Volume (mL)", value = 0),
actionButton("calcUF", "Calculate UF"),
textOutput("ufResults")
),
box(title = "Blood Parameters", status = "warning", solidHeader = TRUE, collapsible = TRUE, width = 4,
numericInput("bloodUrea", "Blood Urea (mg/dL)", value = 0),
numericInput("bloodCreatinine", "Blood Creatinine (mg/dL)", value = 0)
),
box(title = "Sodium Sieving", status = "danger", solidHeader = TRUE, collapsible = TRUE, width = 4,
numericInput("sodium0", "Sodium at 0 hours (mEq/L)", value = 145),
numericInput("sodium1", "Sodium at 1 hour (mEq/L)", value = 138),
actionButton("calcSodiumSieving", "Calculate Sodium Sieving"),
textOutput("sodiumSievingResults")
)
),
fluidRow(
box(title = "Peritoneal Dialysis Fluid Parameters", status = "success", solidHeader = TRUE, collapsible = TRUE, width = 12,
numericInput("glucose0", "Glucose at 0 hours (mg/dL)", value = 0),
numericInput("glucose1", "Glucose at 1 hour (mg/dL)", value = 0),
numericInput("glucose2", "Glucose at 2 hours (mg/dL)", value = 0),
numericInput("glucose4", "Glucose at 4 hours (mg/dL)", value = 0),
numericInput("creatinine0", "Creatinine at 0 hours (mg/dL)", value = 0),
numericInput("creatinine1", "Creatinine at 1 hour (mg/dL)", value = 0),
numericInput("creatinine2", "Creatinine at 2 hours (mg/dL)", value = 0),
numericInput("creatinine4", "Creatinine at 4 hours (mg/dL)", value = 0),
numericInput("urea0", "Urea at 0 hours (mg/dL)", value = 0),
numericInput("urea1", "Urea at 1 hour (mg/dL)", value = 0),
numericInput("urea2", "Urea at 2 hours (mg/dL)", value = 0),
numericInput("urea4", "Urea at 4 hours (mg/dL)", value = 0)
)
)
),
tabItem(tabName = "graphs",
fluidRow(
box(title = "Glucose Graph", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 12,
plotOutput("plotGlucose")
),
box(title = "Creatinine Graph", status = "warning", solidHeader = TRUE, collapsible = TRUE, width = 12,
plotOutput("plotCreatinine"),
verbatimTextOutput("creatinineComment")
),
box(title = "Urea Graph", status = "info", solidHeader = TRUE, collapsible = TRUE, width = 12,
plotOutput("plotUrea")
)
)
)
)
)
)
server <- function(input, output, session) {
# BMI calculation
output$bmiResults <- renderText({
bmi <- calculate_bmi(input$weight, input$height)
paste("BMI is", round(bmi, 2), "kg/m²")
})
# UF calculation
observeEvent(input$calcUF, {
ufResult <- calculate_uf(input$drainVolume, input$infusionVolume)
output$ufResults <- renderText({
if(ufResult < 400) {
"Ultrafiltration Failure: Consider evaluating for aquaporin transport issues or adding icodextrin if increased UF is needed."
} else {
"Ultrafiltration Volume is adequate."
}
})
})
# Sodium Sieving calculation
observeEvent(input$calcSodiumSieving, {
sodiumSieving <- calculate_sodium_sieving(input$sodium0, input$sodium1)
output$sodiumSievingResults <- renderText({
if(sodiumSieving < 5) {
"Failure in water transport through aquaporins. Consider adding icodextrin if an increase in UF is needed."
} else {
"Sodium sieving is within expected range."
}
})
})
# Generate plots based on user inputs
output$plotGlucose <- renderPlot({
inputGlucose <- c(input$glucose0, input$glucose1, input$glucose2, input$glucose4)
normalizedGlucose <- inputGlucose / input$glucose0
glucoseData <- data.frame(time = c(0, 1, 2, 4), normalized = normalizedGlucose)
generatePlotWithBands2(glucoseData, "Glucose", "D/D0", pointsGlu)
})
output$plotCreatinine <- renderPlot({
generatePlotWithBands(
c(0, 1, 2, 4),
c(input$creatinine0, input$creatinine1, input$creatinine2, input$creatinine4),
input$bloodCreatinine, # Divisor is blood creatinine value
"Creatinine", "D/P", pointsCrea
)
})
output$plotUrea <- renderPlot({
generatePlotWithBands(
c(0, 1, 2, 4),
c(input$urea0, input$urea1, input$urea2, input$urea4),
input$bloodUrea, # Divisor is blood urea value
"Urea", "D/P", pointsUrea
)
})
# Creatinine comment
output$creatinineComment <- renderPrint({
creatinineRatio <- input$creatinine4 / input$bloodCreatinine
if (creatinineRatio > 0.81) {
"High transporter, consider automatic PD prescription."
} else if (creatinineRatio > 0.65) {
"Medium high transporter."
} else if (creatinineRatio > 0.5) {
"Medium low transporter."
} else if (creatinineRatio < 0.5) {
"Low transporter, consider manual PD prescription."
} else {
""
}
})
}
# Run the app
shinyApp(ui, server)
# inst/shinyapp/app.R
library(shiny)
library(shinydashboard)
library(DT)
library(ggplot2)
pointsGlu <- data.frame(
time = c(0, 1, 2, 4),
high = c(1, 0.88, 0.78, 0.61),
medium_high = c(1, 0.79, 0.66, 0.49),
medium_low = c(1, 0.71, 0.55, 0.38),
low = c(1, 0.60, 0.44, 0.26),
very_low = c(1, 0.40, 0.24, 0.12)
)
pointsCrea <- data.frame(
time = c(0, 1, 2, 4),
very_high = c(0, 0.14, 0.23, 0.34),
high = c(0.02, 0.21, 0.34, 0.5),
medium_high = c(0.05, 0.28, 0.40, 0.55),
medium = c(0.08, 0.34, 0.48, 0.65),
medium_low = c(0.1, 0.40, 0.55, 0.72),
low = c(0.12, 0.46, 0.62, 0.81),
very_low = c(0.25, 0.72, 0.87, 1.03)
)
pointsUrea <- data.frame(
time = c(0, 1, 2, 4),
very_high = c(0, 0.32, 0.46, 0.75),
high = c(0.05, 0.45, 0.64, 0.84),
medium = c(0.1, 0.55, 0.73, 0.91),
low = c(0.15, 0.65, 0.83, 0.98),
very_low = c(0.25, 0.85, 0.96, 1.09)
)
ui <- dashboardPage(
dashboardHeader(title = "Peritoneal Equilibration Test"),
dashboardSidebar(
sidebarMenu(
menuItem("Data Input", tabName = "data_input", icon = icon("edit")),
menuItem("Graphs", tabName = "graphs", icon = icon("chart-line"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "data_input",
fluidRow(
box(title = "Patient Data", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 4,
numericInput("age", "Age", value = 30),
selectInput("sex", "Sex", choices = c("Male", "Female")),
numericInput("weight", "Weight (kg)", value = 70),
numericInput("height", "Height (cm)", value = 175),
textOutput("bmiResults")
),
box(title = "Ultrafiltration Volume", status = "info", solidHeader = TRUE, collapsible = TRUE, width = 4,
numericInput("drainVolume", "Drained Volume (mL)", value = 0),
numericInput("infusionVolume", "Infused Volume (mL)", value = 0),
actionButton("calcUF", "Calculate UF"),
textOutput("ufResults")
),
box(title = "Blood Parameters", status = "warning", solidHeader = TRUE, collapsible = TRUE, width = 4,
numericInput("bloodUrea", "Blood Urea (mg/dL)", value = 0),
numericInput("bloodCreatinine", "Blood Creatinine (mg/dL)", value = 0)
),
box(title = "Sodium Sieving", status = "danger", solidHeader = TRUE, collapsible = TRUE, width = 4,
numericInput("sodium0", "Sodium at 0 hours (mEq/L)", value = 145),
numericInput("sodium1", "Sodium at 1 hour (mEq/L)", value = 138),
actionButton("calcSodiumSieving", "Calculate Sodium Sieving"),
textOutput("sodiumSievingResults")
)
),
fluidRow(
box(title = "Peritoneal Dialysis Fluid Parameters", status = "success", solidHeader = TRUE, collapsible = TRUE, width = 12,
numericInput("glucose0", "Glucose at 0 hours (mg/dL)", value = 0),
numericInput("glucose1", "Glucose at 1 hour (mg/dL)", value = 0),
numericInput("glucose2", "Glucose at 2 hours (mg/dL)", value = 0),
numericInput("glucose4", "Glucose at 4 hours (mg/dL)", value = 0),
numericInput("creatinine0", "Creatinine at 0 hours (mg/dL)", value = 0),
numericInput("creatinine1", "Creatinine at 1 hour (mg/dL)", value = 0),
numericInput("creatinine2", "Creatinine at 2 hours (mg/dL)", value = 0),
numericInput("creatinine4", "Creatinine at 4 hours (mg/dL)", value = 0),
numericInput("urea0", "Urea at 0 hours (mg/dL)", value = 0),
numericInput("urea1", "Urea at 1 hour (mg/dL)", value = 0),
numericInput("urea2", "Urea at 2 hours (mg/dL)", value = 0),
numericInput("urea4", "Urea at 4 hours (mg/dL)", value = 0)
)
)
),
tabItem(tabName = "graphs",
fluidRow(
box(title = "Glucose Graph", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 12,
plotOutput("plotGlucose")
),
box(title = "Creatinine Graph", status = "warning", solidHeader = TRUE, collapsible = TRUE, width = 12,
plotOutput("plotCreatinine"),
verbatimTextOutput("creatinineComment")
),
box(title = "Urea Graph", status = "info", solidHeader = TRUE, collapsible = TRUE, width = 12,
plotOutput("plotUrea")
)
)
)
)
)
)
# Define server logic
server <- function(input, output, session) {
# BMI calculation
output$bmiResults <- renderText({
bmi <- input$weight / (input$height / 100)^2
paste("BMI is", round(bmi, 2), "kg/m²")
})
# UF calculation
observeEvent(input$calcUF, {
ufResult <- input$drainVolume - input$infusionVolume
output$ufResults <- renderText({
if(ufResult < 400) {
"Ultrafiltration Failure: Consider evaluating for aquaporin transport issues or adding icodextrin if increased UF is needed."
} else {
"Ultrafiltration Volume is adequate."
}
})
})
# Sodium Sieving calculation
observeEvent(input$calcSodiumSieving, {
sodiumSieving <- input$sodium0 - input$sodium1
output$sodiumSievingResults <- renderText({
if(sodiumSieving < 5) {
"Failure in water transport through aquaporins. Consider adding icodextrin if an increase in UF is needed."
} else {
"Sodium sieving is within expected range."
}
})
})
# Function to generate plots with bands
generatePlotWithBands2 <- function(data, title, yAxisLabel, bandsData) {
ggplot(data, aes(x = time)) +
geom_ribbon(data = bandsData, aes(ymin = very_low, ymax = low), fill = "pink", alpha = 0.5) +
geom_ribbon(data = bandsData, aes(ymin = low, ymax = medium_low), fill = "violet", alpha = 0.5) +
geom_ribbon(data = bandsData, aes(ymin = medium_low, ymax = medium_high), fill = "lightblue", alpha = 0.5) +
geom_ribbon(data = bandsData, aes(ymin = medium_high, ymax = high), fill = "lightgreen", alpha = 0.5) +
geom_line(aes(y = normalized), color = "red") +
geom_point(aes(y = normalized), color = "red", size = 4) +
labs(title = title, x = "Time (hours)", y = yAxisLabel) +
theme_minimal() +
theme(panel.grid.major = element_line(color = "gray", size = 0.5),
panel.grid.minor = element_line(color = "gray", size = 0.25),
panel.background = element_rect(fill = "white"),
legend.position = "none",
axis.line = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.ticks = element_blank())
}
generatePlotWithBands <- function(timePoints, measurementPoints, bloodValue, title, yAxisLabel, bandsData) {
# Normalizar los valores de las mediciones
normalizedValues <- na.omit(measurementPoints / bloodValue)
data <- data.frame(time = na.omit(timePoints), normalized = normalizedValues)
# Crear el gráfico
ggplot(data, aes(x = time)) +
geom_ribbon(data = bandsData, aes(ymin = very_low, ymax = low), fill = "pink", alpha = 0.5) +
geom_ribbon(data = bandsData, aes(ymin = low, ymax = medium), fill = "violet", alpha = 0.5) +
geom_ribbon(data = bandsData, aes(ymin = medium, ymax = high), fill = "lightblue", alpha = 0.5) +
geom_ribbon(data = bandsData, aes(ymin = high, ymax = very_high), fill = "lightgreen", alpha = 0.5) +
geom_line(aes(y = normalized), color = "red") +
geom_point(aes(y = normalized), color = "red", size = 4) +
labs(title = title, x = "Time (hours)", y = yAxisLabel) +
theme_minimal() +
theme(panel.grid.major = element_line(color = "gray", size = 0.5),
panel.grid.minor = element_line(color = "gray", size = 0.25),
panel.background = element_rect(fill = "white"),
legend.position = "none",
axis.line = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.ticks = element_blank())
}
# Generate plots based on user inputs
output$plotGlucose <- renderPlot({
inputGlucose <- c(input$glucose0, input$glucose1, input$glucose2, input$glucose4)
normalizedGlucose <- inputGlucose / input$glucose0
glucoseData <- data.frame(time = c(0, 1, 2, 4), normalized = normalizedGlucose)
generatePlotWithBands2(glucoseData, "Glucose", "D/D0", pointsGlu)
})
output$plotCreatinine <- renderPlot({
generatePlotWithBands(
c(0, 1, 2, 4),
c(input$creatinine0, input$creatinine1, input$creatinine2, input$creatinine4),
input$bloodCreatinine, # Divisor is blood creatinine value
"Creatinine", "D/P", pointsCrea
)
})
output$plotUrea <- renderPlot({
generatePlotWithBands(
c(0, 1, 2, 4),
c(input$urea0, input$urea1, input$urea2, input$urea4),
input$bloodUrea, # Divisor is blood urea value
"Urea", "D/P", pointsUrea
)
})
# Creatinine comment
output$creatinineComment <- renderPrint({
creatinineRatio <- input$creatinine4 / input$bloodCreatinine
if (creatinineRatio > 0.81) {
"High transporter, consider automatic PD prescription."
} else if (creatinineRatio > 0.65) {
"Medium high transporter."
} else if (creatinineRatio > 0.5) {
"Medium low transporter."
} else if (creatinineRatio < 0.5) {
"Low transporter, consider manual PD prescription."
} else {
""
}
})
}
# Run the app
shinyApp(ui, server)
roxygenise()
devtools::install("/Users/martabellorego/Desktop/PeritonealEquilibrationT")
library(PeritonealEquilibrationT)
# Ejecutar la aplicación Shiny
runPeritonealEquilibriumTestApp()
